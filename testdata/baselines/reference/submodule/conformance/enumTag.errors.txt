a.js(24,13): error TS2749: 'Target' refers to a value, but is being used as a type here. Did you mean 'typeof Target'?
a.js(24,13): error TS8010: Type annotations can only be used in TypeScript files.
a.js(25,12): error TS2749: 'Second' refers to a value, but is being used as a type here. Did you mean 'typeof Second'?
a.js(25,12): error TS8010: Type annotations can only be used in TypeScript files.
a.js(26,12): error TS2749: 'Fs' refers to a value, but is being used as a type here. Did you mean 'typeof Fs'?
a.js(26,12): error TS8010: Type annotations can only be used in TypeScript files.
a.js(29,16): error TS8010: Type annotations can only be used in TypeScript files.
a.js(31,16): error TS8010: Type annotations can only be used in TypeScript files.
a.js(33,16): error TS8010: Type annotations can only be used in TypeScript files.
a.js(35,16): error TS2749: 'Target' refers to a value, but is being used as a type here. Did you mean 'typeof Target'?
a.js(35,16): error TS8010: Type annotations can only be used in TypeScript files.
a.js(37,16): error TS2339: Property 'UNKNOWN' does not exist on type '{ START: string; MIDDLE: string; END: string; MISTAKE: number; OK_I_GUESS: number; }'.
a.js(41,13): error TS8010: Type annotations can only be used in TypeScript files.


==== a.js (13 errors) ====
    /** @enum {string} */
    const Target = {
        START: "start",
        MIDDLE: "middle",
        END: "end",
        MISTAKE: 1,
        /** @type {number} */
        OK_I_GUESS: 2
    }
    /** @enum number */
    const Second = {
        MISTAKE: "end",
        OK: 1,
        /** @type {number} */
        FINE: 2,
    }
    /** @enum {function(number): number} */
    const Fs = {
        ADD1: n => n + 1,
        ID: n => n,
        SUB1: n => n - 1
    }
    
    /** @param {Target} t
                ~~~~~~
!!! error TS2749: 'Target' refers to a value, but is being used as a type here. Did you mean 'typeof Target'?
                ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
     * @param {Second} s
               ~~~~~~
!!! error TS2749: 'Second' refers to a value, but is being used as a type here. Did you mean 'typeof Second'?
               ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
     * @param {Fs} f
               ~~
!!! error TS2749: 'Fs' refers to a value, but is being used as a type here. Did you mean 'typeof Fs'?
               ~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
     */
    function consume(t,s,f) {
        /** @type {string} */
                   ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
        var str = t
        /** @type {number} */
                   ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
        var num = s
        /** @type {(n: number) => number} */
                   ~~~~~~~~~~~~~~~~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
        var fun = f
        /** @type {Target} */
                   ~~~~~~
!!! error TS2749: 'Target' refers to a value, but is being used as a type here. Did you mean 'typeof Target'?
                   ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
        var v = Target.START
        v = Target.UNKNOWN // error, can't find 'UNKNOWN'
                   ~~~~~~~
!!! error TS2339: Property 'UNKNOWN' does not exist on type '{ START: string; MIDDLE: string; END: string; MISTAKE: number; OK_I_GUESS: number; }'.
        v = Second.MISTAKE // meh..ok, I guess?
        v = 'something else' // allowed, like Typescript's classic enums and unlike its string enums
    }
    /** @param {string} s */
                ~~~~~~
!!! error TS8010: Type annotations can only be used in TypeScript files.
    function ff(s) {
        // element access with arbitrary string is an error only with noImplicitAny
        if (!Target[s]) {
            return null
        }
        else {
            return Target[s]
        }
    }
    
    
    